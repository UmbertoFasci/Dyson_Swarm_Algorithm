#+title: Dyson Algorithm


#+begin_src jupyter-python :file gradient_sphere.gif
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

def f(x,y):
    "Objective function"
    return (x-3.14)**2 + (y-2.72)**2 + np.sin(3*x+1.41) + np.sin(4*y-1.73)

# Define function to project points onto a sphere
def project_onto_sphere(x, y, z, r=5):
    # Compute polar coordinates
    theta = np.arctan2(y, x)
    phi = np.arctan2(z, np.sqrt(x**2 + y**2))
    # Compute projected coordinates
    x_proj = r * np.sin(phi) * np.cos(theta)
    y_proj = r * np.sin(phi) * np.sin(theta)
    z_proj = r * np.cos(phi)
    return x_proj, y_proj, z_proj

# Compute and plot the function in 3D within [0,5]x[0,5]
x, y = np.meshgrid(np.linspace(0,5,100), np.linspace(0,5,100))
z = f(x, y)

# Find the global minimum
x_min = x.ravel()[z.argmin()]
y_min = y.ravel()[z.argmin()]

# Hyper-parameter of the algorithm
c1 = c2 = 0.1
w = 0.8

# Create particles
n_particles = 20
np.random.seed(100)
X = np.random.rand(3, n_particles) * 5
V = np.random.randn(3, n_particles) * 0.1

# Initialize data
pbest = X
pbest_obj = f(X[0], X[1])
gbest = pbest[:, pbest_obj.argmin()]
gbest_obj = pbest_obj.min()

def update():
    "Function to do one iteration of particle swarm optimization"
    global V, X, pbest, pbest_obj, gbest, gbest_obj
    # Update params
    r1, r2 = np.random.rand(2)
    V = w * V + c1*r1*(pbest - X) + c2*r2*(gbest.reshape(-1,1)-X)
    X = X + V
    obj = f(X[0], X[1])
    pbest[:, (pbest_obj >= obj)] = X[:, (pbest_obj >= obj)]
    pbest_obj = np.array([pbest_obj, obj]).min(axis=0)
    gbest = pbest[:, pbest_obj.argmin()]
    gbest_obj = pbest_obj.min()

# Set up base figure: The 3D plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(x, y, z, cmap='viridis', alpha=0.5)
ax.scatter([x_min], [y_min], [f(x_min, y_min)], marker='x', s=50, color="red")
pbest_plot = ax.scatter(pbest[0], pbest[1], pbest[2], marker='o', color='black', alpha=0.5)
p_plot = ax.scatter(X[0], X[1], X[2], marker='o', color='blue', alpha=0.5)
p_arrow = ax.quiver(X[0], X[1], X[2], V[0], V[1], V[2], color='blue', alpha=0.5)

# Animate Plot
ani = FuncAnimation(fig, update, frames=100, interval=100, blit=True)
ani.save('Gradient_Surface.gif', writer='pillow')
#+end_src
