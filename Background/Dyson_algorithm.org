#+title: Dyson Algorithm

#+begin_src jupyter-python
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation

# Define parameters
num_agents = 10
radius = 1

# Generate random positions for agents on the surface of the sphere
theta = np.random.uniform(0, np.pi, num_agents)
phi = np.random.uniform(0, 2 * np.pi, num_agents)
x = radius * np.sin(theta) * np.cos(phi)
y = radius * np.sin(theta) * np.sin(phi)
z = radius * np.cos(theta)
agents = np.column_stack((x, y, z))

# Generate a gradient surface of data on the sphere
num_points = 5000
theta = np.linspace(0, np.pi, num_points)
phi = np.linspace(0, 2 * np.pi, num_points)
theta, phi = np.meshgrid(theta, phi)
x = radius * np.sin(theta) * np.cos(phi)
y = radius * np.sin(theta) * np.sin(phi)
z = radius * np.cos(theta)
data = np.sin(10 * theta) * np.sin(phi)

# Initialize plot
fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111, projection='3d')
ax.set_xlim([-1.1, 1.1])
ax.set_ylim([-1.1, 1.1])
ax.set_zlim([-1.1, 1.1])
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
agents_scatter = ax.scatter(agents[:, 0], agents[:, 1], agents[:, 2], c='r', s=50)
points_surface = ax.plot_surface(x, y, z, facecolors=plt.colormaps.get_cmap('winter')(data), alpha=0.5)

# Define animation function
def update(frame):
    global agents, data
    # Generate random positions for agents on the surface of the sphere
    theta = np.random.uniform(0, np.pi, num_agents)
    phi = np.random.uniform(0, 2 * np.pi, num_agents)
    x = radius * np.sin(theta) * np.cos(phi)
    y = radius * np.sin(theta) * np.sin(phi)
    z = radius * np.cos(theta)
    agents = np.column_stack((x, y, z))

    # Calculate value of data at each agent's position
    idx = np.round(((theta / np.pi) * (num_points - 1))).astype(int)
    idy = np.round(((phi / (2 * np.pi)) * (num_points - 1))).astype(int)
    values = data[idx, idy]

    # Update positions and colors of agents
    agents_scatter._offsets3d = agents[:, 0], agents[:, 1], agents[:, 2]
    agents_scatter._facecolor3d = plt.colormaps.get_cmap('Reds')(values)

    return agents_scatter, points_surface

# Animate plot
ani = FuncAnimation(fig, update, frames=100, interval=100, blit=True)

# Save animation as GIF
ani.save('gradient_sphere.gif', writer='pillow')

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/fa72ab6828b3768be838d7b71e298b38830a75e0.png]]
