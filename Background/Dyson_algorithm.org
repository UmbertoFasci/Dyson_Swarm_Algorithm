#+title: Dyson Algorithm

#+begin_src jupyter-python
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def sphere(x, y, z):
    return x**2 + y**2 + z**2

def generate_sphere_points(n):
    phi = np.random.uniform(0, np.pi, n)
    theta = np.random.uniform(0, 2 * np.pi, n)
    x = np.sin(phi) * np.cos(theta)
    y = np.sin(phi) * np.sin(theta)
    z = np.cos(phi)
    return np.column_stack((x, y, z))

def pso_sphere(n_particles, n_iterations, w=0.5, c1=0.8, c2=0.9):
    swarm = generate_sphere_points(n_particles)
    swarm = swarm.astype(float)
    v = np.zeros((n_particles, 3))
    pbest = swarm
    pbest = pbest.astype(float)
    gbest = pbest[np.argmin(sphere(*pbest.T)), :]
    gbest = gbest.astype(float)
    for i in range(n_iterations):
        r1 = np.random.uniform(size=(n_particles, 3))
        r2 = np.random.uniform(size=(n_particles, 3))
        v = w*v + c1*r1*(pbest-swarm) + c2*r2*(gbest-swarm)
        swarm = swarm + v
        pbest_vals = sphere(*pbest.T)
        swarm_vals = sphere(*swarm.T)
        new_pbest = np.where(pbest_vals<swarm_vals, pbest, swarm)
        gbest = new_pbest[np.argmin(sphere(*new_pbest.T)), :]
        pbest = new_pbest
        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
        ax.set_xlim(-1, 1)
        ax.set_ylim(-1, 1)
        ax.set_zlim(-1, 1)
        ax.scatter(swarm[:,0], swarm[:,1], swarm[:,2], color='blue')
        ax.scatter(gbest[0], gbest[1], gbest[2], color='red')
        plt.title(f'Iteration {i+1}')
        plt.savefig(f'pso_sphere_{i+1}.png')
        plt.close(fig)

if __name__ == '__main__':
    pso_sphere(n_particles=30, n_iterations=20)
#+end_src


#+begin_src jupyter-python
test = np.zeros((30, 3))
print(test)
#+end_src

#+RESULTS:
#+begin_example
[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]
#+end_example


#+begin_src jupyter-python
test2 = np.random.uniform(size=(30, 3))

print(test2.shape)
#+end_src

#+RESULTS:
: (30, 3)

#+begin_src jupyter-python
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def animate(i):
    ax.clear()
    ax.view_init(elev=10., azim=i)
    ax.set_axis_off()
    ax.set_xlim([-1.5, 1.5])
    ax.set_ylim([-1.5, 1.5])
    ax.set_zlim([-1.5, 1.5])
    ax.scatter(x, y, z, color='blue', alpha=0.5, s=20)

fig = plt.figure(figsize=(8,8))
ax = fig.add_subplot(111, projection='3d')

# Plot sphere
u, v = np.mgrid[0:2*np.pi:20j, 0:np.pi:10j]
x = np.cos(u)*np.sin(v)
y = np.sin(u)*np.sin(v)
z = np.cos(v)
ax.plot_wireframe(x, y, z, color="gray")

# Set initial view
ax.view_init(elev=10., azim=0)
ax.set_axis_off()
ax.set_xlim([-1.5, 1.5])
ax.set_ylim([-1.5, 1.5])
ax.set_zlim([-1.5, 1.5])

# Animate
from matplotlib.animation import FuncAnimation
ani = FuncAnimation(fig, animate, frames=360, interval=50)

# Save animation as gif
ani.save('particle_animation.gif', writer='imagemagick')

#+end_src

#+RESULTS:
:RESULTS:
: MovieWriter imagemagick unavailable; using Pillow instead.
[[file:./.ob-jupyter/bd6d0a1491600f6e1ddbcb2f7780dfec0088686d.png]]
:END:
